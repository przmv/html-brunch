// Generated by CoffeeScript 1.6.3
var HtmlCompiler, fs, sysPath;

fs = require('fs');

sysPath = require('path');

String.prototype.endsWith = function(str) {
  if (this.match(new RegExp("" + str + "$"))) {
    return true;
  } else {
    return false;
  }
};

module.exports = HtmlCompiler = (function() {
  HtmlCompiler.prototype.brunchPlugin = true;

  HtmlCompiler.prototype.type = 'stylesheet';

  HtmlCompiler.prototype.extension = 'html';

  function HtmlCompiler(config) {
    this.config = config;
    null;
  }

  HtmlCompiler.prototype.wrapTemplate = function(id, data) {
    return "<script type=\"text/template\" id=\"" + id + "\">\n  " + data + "\n</script>";
  };

  HtmlCompiler.prototype.compile = function(data, path, callback) {
    var app, err, error, id, name, template;
    try {
      app = path.split(sysPath.sep)[1];
      name = sysPath.basename(path, "." + this.extension);
      id = "" + app + "-" + name + "-template";
      return template = this.wrapTemplate(id, data);
    } catch (_error) {
      err = _error;
      return error = err;
    } finally {
      callback(error, template);
    }
  };

  HtmlCompiler.prototype.onCompile = function(generatedFiles) {
    var curPath, file, path, _i, _len, _ref, _results;
    path = sysPath.join(this.config.paths["public"], "tpl");
    _ref = fs.readdirSync(path);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      curPath = sysPath.join(path, file);
      if (file.endsWith(".map")) {
        _results.push(fs.unlinkSync(curPath));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return HtmlCompiler;

})();
