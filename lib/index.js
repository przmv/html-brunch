// Generated by CoffeeScript 1.6.3
var HtmlCompiler, fs, mkdirp, sysPath;

sysPath = require('path');

mkdirp = require('mkdirp');

fs = require('fs');

String.prototype.endsWith = function(str) {
  if (this.match(new RegExp("" + str + "$"))) {
    return true;
  } else {
    return false;
  }
};

module.exports = HtmlCompiler = (function() {
  HtmlCompiler.prototype.brunchPlugin = true;

  HtmlCompiler.prototype.type = 'template';

  HtmlCompiler.prototype.extension = 'html';

  function HtmlCompiler(config) {
    this.config = config;
    null;
  }

  HtmlCompiler.prototype.wrapTemplate = function(id, data) {
    return "<script type=\"text/template\" id=\"" + id + "\">\n  " + data + "\n</script>";
  };

  HtmlCompiler.prototype.getPublicDir = function() {
    return this.config.paths["public"];
  };

  HtmlCompiler.prototype.getTemplatesDir = function() {
    var tpl;
    if (this.config.files.templates.joinTo.endsWith(sysPath.sep)) {
      tpl = this.config.files.templates.joinTo;
    } else {
      tpl = sysPath.dirname(this.config.files.templates.joinTo);
    }
    return sysPath.join(this.getPublicDir(), tpl);
  };

  HtmlCompiler.prototype.compile = function(data, path, callback) {
    var app, err, error, fname, id, name, template;
    try {
      app = path.split(sysPath.sep)[1];
      name = sysPath.basename(path, "." + this.extension);
      id = "" + app + "-" + name + "-template";
      template = this.wrapTemplate(id, data);
      fname = sysPath.join(this.getTemplatesDir(), "" + app + "." + this.extension);
      mkdirp.sync(sysPath.dirname(fname));
      return fs.appendFileSync(fname, template);
    } catch (_error) {
      err = _error;
      return error = err;
    } finally {
      callback(error, null);
    }
  };

  return HtmlCompiler;

})();
